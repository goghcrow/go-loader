package loader

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/printer"
	"go/token"
	"io"
	"os"
	"path/filepath"
	"strings"
)

type File struct {
	File     *ast.File
	Pkg      *Package
	Filename FileName
	GenBy    string
}

func (f *File) Package() Pkg {
	return MkPkg(f.Pkg)
}

func (f *File) ShowPos(n ast.Node) string {
	return f.Pkg.Fset.Position(n.Pos()).String()
}

func (f *File) ShowNode(n ast.Node) string {
	// if IsPseudoNode(n) {
	// 	return showPseudoNode(fset, n)
	// }
	var buf bytes.Buffer
	_ = printer.Fprint(&buf, f.Pkg.Fset, n)
	return buf.String()
}

func (f *File) ShowNodeWithPos(n ast.Node) string {
	return f.ShowNode(n) + "\nat " + f.ShowPos(n)
}

func (f *File) Format() string {
	buf := new(bytes.Buffer)
	err := format.Node(buf, f.Pkg.Fset, f.File)
	panicIf(err)
	return buf.String()
}

func (f *File) Write(filename string) {
	f.WriteWithComment(filename, "")
}

const normalizeNumbers = 1 << 30

func (f *File) WriteRaw(output io.Writer) {
	p := printer.Config{Tabwidth: 8, Mode: printer.RawFormat | normalizeNumbers}
	err := p.Fprint(output, token.NewFileSet(), f.File)
	panicIf(err)
}

func (f *File) WriteWithComment(filename string, comment string) {
	mustMkDir(filepath.Dir(filename))
	fh, err := os.Create(filename)
	panicIf(err)
	defer func() {
		err = fh.Close()
		panicIf(err)
	}()

	if comment == "" {
		err = format.Node(fh, f.Pkg.Fset, f.File)
		panicIf(err)
		return
	}

	src := f.Format()
	if !strings.HasPrefix(src, comment) {
		_, err = fmt.Fprint(fh, comment)
		panicIf(err)
	}

	_, err = fh.WriteString(src)
	panicIf(err)
}

func (f *File) WriteGenerated(filename string, genBy string) {
	f.WriteWithComment(
		filename,
		fmt.Sprintf("// Code generated by %s DO NOT EDIT.\n", genBy),
	)
}
