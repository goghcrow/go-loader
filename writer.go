package loader

import (
	"bytes"
	"fmt"
	"go/ast"
	"go/format"
	"go/printer"
	"go/token"
	"io"
	"os"
	"path/filepath"
	"strings"
)

func (l *Loader) ShowPos(n ast.Node) string {
	return l.FSet.Position(n.Pos()).String()
}

func (l *Loader) ShowNode(n ast.Node) string {
	// if IsPseudoNode(n) {
	// 	return showPseudoNode(fset, n)
	// }
	var buf bytes.Buffer
	_ = printer.Fprint(&buf, l.FSet, n)
	return buf.String()
}

func (l *Loader) ShowNodeWithPos(n ast.Node) string {
	return l.ShowNode(n) + "\nat " + l.ShowPos(n)
}

func (l *Loader) FormatFile(f *ast.File) string {
	buf := new(bytes.Buffer)
	err := format.Node(buf, l.FSet, f)
	panicIf(err)
	return buf.String()
}

func (l *Loader) WriteFile(filename string, f *ast.File) {
	l.WriteFileWithComment(filename, "", f)
}

const normalizeNumbers = 1 << 30

func (l *Loader) WriteFileRaw(output io.Writer, f *ast.File) {
	p := printer.Config{Tabwidth: 8, Mode: printer.RawFormat | normalizeNumbers}
	err := p.Fprint(output, token.NewFileSet(), f)
	panicIf(err)
}

func (l *Loader) WriteFileWithComment(filename string, comment string, f *ast.File) {
	mustMkDir(filepath.Dir(filename))
	fh, err := os.Create(filename)
	panicIf(err)
	defer func() {
		err = fh.Close()
		panicIf(err)
	}()

	if comment == "" {
		err = format.Node(fh, l.FSet, f)
		panicIf(err)
		return
	}

	src := l.FormatFile(f)
	if !strings.HasPrefix(src, comment) {
		_, err = fmt.Fprint(fh, comment)
		panicIf(err)
	}

	_, err = fh.WriteString(src)
	panicIf(err)
}

func (l *Loader) WriteGeneratedFile(filename string, genBy string, f *ast.File) {
	l.WriteFileWithComment(
		filename,
		fmt.Sprintf("// Code generated by %s DO NOT EDIT.\n", genBy),
		f,
	)
}
